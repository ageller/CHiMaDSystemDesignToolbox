// original from: http://mashe.hawksey.info/2014/07/google-sheets-as-a-database-insert-with-apps-script-using-postget-methods-with-ajax-example/
// original gist: https://gist.github.com/willpatera/ee41ae374d3c9839c2d6 

// additional functionality added by AMG

function doGet(e){
  //return handleResponse(JSON.parse(e));
  return handleResponse(e);
}

//  Enter sheet name where data is to be written below
//AMG: this can be updated based on the input
var SHEET_NAME = "default";

var SCRIPT_PROP = PropertiesService.getScriptProperties(); // new property service

 
function handleResponse(e) {
//for debugging
//  e = {'parameter':{'SHEET_NAME':'foo','header':['col1','col2','col3']}};

  // shortly after my original solution Google announced the LockService[1]
  // this prevents concurrent access overwritting data
  // [1] http://googleappsdeveloper.blogspot.co.uk/2011/10/concurrency-and-google-apps-script.html
  // we want a public lock, one that locks for all invocations
  var lock = LockService.getPublicLock();
  lock.waitLock(30000);  // wait 30 seconds before conceding defeat.
    
  try {
    // next set where we write the data - you could write to multiple/alternate destinations
    var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
  
    //reset the sheet name based on the input
    if ('SHEET_NAME' in e.parameter) SHEET_NAME = e.parameter['SHEET_NAME'];

    var sheet = doc.getSheetByName(SHEET_NAME);
    if (!sheet) {
      doc.insertSheet(SHEET_NAME);
      sheet = doc.getSheetByName(SHEET_NAME);
    }

    //if we are creating a new sheet, we will need to define the headers
    if ('header[]' in e.parameters){
      sheet.getRange(1, 1, 1, e.parameters['header[]'].length).setValues([e.parameters['header[]']]);
    } else {
      //otherwise fill in the row

      var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      var nextRow = sheet.getLastRow()+1; // get next row
      
      var useRow = -1;
      var version = 1;

dded to check if IP already exists and then set that as the row to use
      // var foundIP = hasIP(sheet, e.parameter['IP']);
      // if (foun //   var versiodIP == 1){
     n = 2;
      //   useRow = searchIPv2(sheet, e.parameter['IP']);
      //   if (useRow != -1){
      //     nextRow = useRow;
      //   }
      // }

      //if we have a sheet name of paragraphs, then we search for the groupname, otherwise we search for the username
      if (SHEET_NAME == 'paragraphs'){
        //check if groupname already exists and then set that as the row to use
        var foundGN = hasGroupname(sheet, e.parameter['groupname']);
        if (foundGN == 1){
          useRow = searchGroupname(sheet, e.parameter['groupname']);
        }
      } else {
        //check if username already exists and then set that as the row to use (this also check the version)
        var foundUN = hasUsername(sheet, e.parameter['username'], e.parameter['task']);
        if (foundUN == 1){
          var version = 2;
          useRow = searchUsernamev2(sheet, e.parameter['username'], e.parameter['task']);
        }
      }

      //if we found a username or groupname above, reset the entry row
      if (useRow != -1){
        nextRow = useRow;
      }

      // loop through the header columns
      var row = []; 
      for (i in headers){
        if (headers[i] == "Timestamp"){ // special case if you include a 'Timestamp' column
          row.push(new Date());
        } 
        if (headers[i] == "version"){ // special case if you include a 'Timestamp' column
          row.push(version);
        } 
        if (headers[i] != "Timestamp" && headers[i] != "version") { // else use header name to get data
          row.push(e.parameter[headers[i]]);
        }
      }
      // more efficient to set values as [][] array than individually
      sheet.getRange(nextRow, 1, 1, row.length).setValues([row]);

    }

    // return json success results
    return ContentService
    .createTextOutput(JSON.stringify({"result":"success123", "row": nextRow,"useRow":useRow, "version":version,"input":e}))
          .setMimeType(ContentService.MimeType.JSON);


  } catch(err){
    // if error return this
    return ContentService
          .createTextOutput(JSON.stringify({"result":"error", "error": err, "input":e}))
          .setMimeType(Contype.JSON);
  } finally { //release lock
    lock.releaseLock();
  }
}

//AMG added to search for the IP
function hasIP(sheet, IPstring) {
  //assumes that the IP is the 2nd column
  var values = sheet.getDataRange().getValues();

  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][1] == IPstring ) { //check for IP
      return 1;
    } 
  }
  return 0;
}
//AMG added to search for the IP and version number
function searchIPv2(sheet, IPstring) {
  //assumes that the IP is the 2nd column, and version is the 4th column
  var values = sheet.getDataRange().getValues();
  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][1] == IPstring && values[i][3] == 2) { //check for IP and version 2
      return i+1;
    } 
  }
  return -1;
}

function hasUsername(sheet, UNstring, Tstring) {
  //assumes that the username is the 3rd column
  var values = sheet.getDataRange().getValues();

  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][2] == UNstring && values[i][4] == Tstring) { //check for username and task
      return 1;
    } 
  }
  return 0;
}
//AMG added to search for the username and version number
function searchUsernamev2(sheet, UNstring, Tstring) {
  //assumes that the username is the 3rd column, and version is the 4th column
  var values = sheet.getDataRange().getValues();
  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][2] == UNstring && values[i][3] == 2 && values[i][4] == Tstring) { //check for username and version 2 and task
      return i+1;
    } 
  }
  return -1;
}

//AMG added to search for a groupname in the paragraphs
function hasGroupname(sheet, Pstring) {
  //assumes that the groupname is the 1st column
  var values = sheet.getDataRange().getValues();

  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][0] == Pstring) { //check for groupname
      return 1;
    } 
  }
  return 0;
}
//AMG added to search for the groupname in the paragrapsh tab
function searchGroupname(sheet, Pstring) {
  //assumes that the groupname is the 1st column
  var values = sheet.getDataRange().getValues();

  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][0] == Pstring) { //check for groupname
      return i+1;
    } 
  }
  return -1;
}


function setup() {
    var doc = SpreadsheetApp.getActiveSpreadsheet();
    SCRIPT_PROP.setProperty("key", doc.getId());
}
