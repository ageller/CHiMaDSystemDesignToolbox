// original from: http://mashe.hawksey.info/2014/07/google-sheets-as-a-database-insert-with-apps-script-using-postget-methods-with-ajax-example/
// original gist: https://gist.github.com/willpatera/ee41ae374d3c9839c2d6 

// additional functionality added by AMG

function doGet(e){
  return handleResponse(e);
}

//  Enter sheet name where data is to be written below
        var SHEET_NAME = "Sheet1";

var SCRIPT_PROP = PropertiesService.getScriptProperties(); // new property service

function handleResponse(e) {
  // shortly after my original solution Google announced the LockService[1]
  // this prevents concurrent access overwritting data
  // [1] http://googleappsdeveloper.blogspot.co.uk/2011/10/concurrency-and-google-apps-script.html
  // we want a public lock, one that locks for all invocations
  var lock = LockService.getPublicLock();
  lock.waitLock(30000);  // wait 30 seconds before conceding defeat.
    
  try {
    // next set where we write the data - you could write to multiple/alternate destinations
    var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
    var sheet = doc.getSheetByName(SHEET_NAME);
    
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var nextRow = sheet.getLastRow()+1; // get next row
    
    var useRow = -1;
    var version = 1;

    // //AMG added to check if IP already exists and then set that as the row to use
    // var foundIP = hasIP(sheet, e.parameter['IP']);
    // if (foundIP == 1){
    //   var version = 2;
    //   useRow = searchIPv2(sheet, e.parameter['IP']);
    //   if (useRow != -1){
    //     nextRow = useRow;
    //   }
    // }

    //AMG added to check if username already exists and then set that as the row to use
    var foundUN = hasUsername(sheet, e.parameter['username']);
    if (foundUN == 1){
      var version = 2;
      useRow = searchUsernamev2(sheet, e.parameter['username']);
      if (useRow != -1){
        nextRow = useRow;
      }
    }

    var row = []; 
    // loop through the header columns
    for (i in headers){
      if (headers[i] == "Timestamp"){ // special case if you include a 'Timestamp' column
        row.push(new Date());
      } 
      if (headers[i] == "version"){ // special case if you include a 'Timestamp' column
        row.push(version);
      } 
      if (headers[i] != "Timestamp" && headers[i] != "version") { // else use header name to get data
        row.push(e.parameter[headers[i]]);
      }
    }
    // more efficient to set values as [][] array than individually
    sheet.getRange(nextRow, 1, 1, row.length).setValues([row]);
    // return json success results
    return ContentService
    .createTextOutput(JSON.stringify({"result":"success", "row": nextRow,"useRow":useRow, "version":version,"input":e}))
          .setMimeType(ContentService.MimeType.JSON);
  } catch(err){
    // if error return this
    return ContentService
          .createTextOutput(JSON.stringify({"result":"error", "error": err}))
          .setMimeType(ContentService.MimeType.JSON);
  } finally { //release lock
    lock.releaseLock();
  }
}

//AMG added to search for the IP
function hasIP(sheet, IPstring) {
  //assumes that the IP is the 2nd column
  var values = sheet.getDataRange().getValues();

  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][1] == IPstring ) { //check for IP
      return 1;
    } 
  }
  return 0;
}
//AMG added to search for the IP and version number
function searchIPv2(sheet, IPstring) {
  //assumes that the IP is the 2nd column, and version is the 4th column
  var values = sheet.getDataRange().getValues();
  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][1] == IPstring && values[i][3] == 2) { //check for IP and version 2
      return i+1;
    } 
  }
  return -1;
}

function hasUsername(sheet, UNstring) {
  //assumes that the username is the 3rd column
  var values = sheet.getDataRange().getValues();

  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][2] == UNstring ) { //check for username
      return 1;
    } 
  }
  return 0;
}
//AMG added to search for the IP and version number
function searchUsernamev2(sheet, UNstring) {
  //assumes that the username is the 3rd column, and version is the 4th column
  var values = sheet.getDataRange().getValues();
  for(var i=0, iLen=values.length; i<iLen; i++) {
    if(values[i][2] == UNstring && values[i][3] == 2) { //check for username and version 2
      return i+1;
    } 
  }
  return -1;
}
function setup() {
    var doc = SpreadsheetApp.getActiveSpreadsheet();
    SCRIPT_PROP.setProperty("key", doc.getId());
}
